Random:: ; 2f8c
; A simple hardware-based random number generator (RNG).

; Two random numbers are generated by adding and subtracting
; the divider to the respective values every time it's called.

; The divider is a register that increments at a rate of 16384Hz.
; For comparison, the Game Boy operates at a clock speed of 4.2MHz.

; Additionally, an equivalent function is executed in VBlank.

; This leaves a with the value in hRandomSub.

	push bc

	ld a, [rDIV]
	ld b, a
	ld a, [hRandomAdd]
	adc b
	ld [hRandomAdd], a

	ld a, [rDIV]
	ld b, a
	ld a, [hRandomSub]
	sbc b
	ld [hRandomSub], a

	pop bc
	ret
; 2f9f

BattleRandom::
; _BattleRandom lives in another bank.

; It handles all RNG calls in the battle engine, allowing
; link battles to remain in sync using a shared PRNG.
	farjp _BattleRandom


RandomRange:: ; 2fb1
; Return a random number between 0 and a (non-inclusive).

	push bc
	ld c, a

	; b = $100 % c
	xor a
	sub c
.mod
	sub c
	jr nc, .mod
	add c
	ld b, a

	; Get a random number
	; from 0 to $ff - b.
	push bc
.loop
	call Random
	ld a, [hRandomAdd]
	ld c, a
	add b
	jr c, .loop
	ld a, c
	pop bc

	call SimpleDivide

	pop bc
	ret
; 2fcb

BattleRandomRange::
; battle friendly RandomRange
	push bc
	ld b, a

	; ensure even distribution by cutting off the top
.loop
	add b
	jr nc, .loop
	sub b
	ld c, a
.loop2
	call BattleRandom
	cp c
	jr nc, .loop2

	; now we have a random number without the uneven top, get mod of it
.loop3
	sub b
	jr nc, .loop3
	add b

	; return the result
	pop bc
	ret
